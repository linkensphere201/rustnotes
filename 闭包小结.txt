- Q: Fn与fn的区别：
  A: https://users.rust-lang.org/t/fn-vs-fn-in-type-signatures/26108

- Q:Fn是什么？
	A:是rust编译器对于闭包的实现引入的3个trait中的1个。
	闭包只是rust的语法糖，实际上编译器会生成1个结构体，该结构体实现下面3个trait中的1个。-----++
	3个trait分别是:
	```
	//...
	pub trait FnOnce<Args> {
	    type Output;
	    extern "rust-call" fn call_once(self, args: Args) -> Self::Output;
	}

	pub trait FnMut<Args>: FnOnce<Args> {
	    extern "rust-call" fn call_mut(
	        &mut self, 
	        args: Args
	    ) -> Self::Output;
	}

	pub trait Fn<Args>: FnMut<Args> {
	    extern "rust-call" fn call(&self, args: Args) -> Self::Output;
	}
	```
	Fn    : &self接受者，
	FnMut : &mut self接受者，
	FnOnce: 以self调用,只能调用一次，

-  Q:编译器把闭包表达式实现为上面3个中的1个，其规则是什么？
	1. 复制语义变量，以不可变引用方式捕获。这种方式捕获的闭包，实现了Fn。示例如下：
		--- PS: &str 字符串是复制语义。
	```

	```
	2. 移动语义变量，执行移动语义，转移所有权捕获。----> FnOnce。注意：这种闭包的接受者是self，只能执行一次。

	3. 可变绑定 + 闭包内部对该变量进行修改，则执行可变引用方式捕获。---> FnMut

	4. 可变性声明的语法。。。。:(
	```
	可变引用作为函数参数：
	fn call_fnmut<F>(a: i32, f: &mut F) -> i32 where F: FnMut(i32) -> i32 {
		//....
	}

	可变绑定作为参数：
	fn call_fnmut<F>(a: i32, mut f: F) -> i32 where F: FnMut(i32) -> i32 {
		//....
	}
	```